<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
		xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
	    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- Property Configuration for Spring (for multi-environment settings) -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
                <!-- This is the default developer configuration location -->
				<value>classpath*:Default.properties</value>
				<value>/var/sparklessons/properties/SparkLessons.properties</value>
			</list>
		</property>
	</bean>
	
	<import resource="CXFConfiguration.xml"/>
	
	<context:annotation-config/>
    
    <!-- Marshaller for CDM -->
    <bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="lazyInit" value="true"/>
         <property name="classesToBeBound">
            <list>
                <value>com.intuit.payments.sdk.jaxb.types.CreditCardCharge</value> 
                <value>com.intuit.payments.sdk.jaxb.types.CreditCard</value>                
            </list>
        </property>
        <property name="supportJaxbElementClass" value="true"/>
        
    </bean>
	
    <context:component-scan base-package="com.intuit.tutor"/>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <mvc:annotation-driven />
    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
    <mvc:resources mapping="/resources/**" location="/resources/" />


	<jdbc:embedded-database id="dataSource" type="HSQL">
	</jdbc:embedded-database>
 
	 <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" lazy-init="false">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.intuit.tutor" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
		<!-- Another way of indicating that we want to update the schema; Spring 
			calls this _after_ the session factory is created, while the hbm2ddl flag 
			above is processed by Hibernate _during_ creationo f the session factory. 
			<property name="schemaUpdate" value="true" /> -->
	</bean>
 
 	<bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
 			
 			<property name="maxUploadSize" value="1000000" />
 
    </bean>
 
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
 
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>